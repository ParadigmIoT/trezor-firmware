// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-ble.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.ble.UploadBLEFirmwareInit)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UploadBLEFirmwareInit {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.ble.UploadBLEFirmwareInit.init_data)
    pub init_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.ble.UploadBLEFirmwareInit.binsize)
    pub binsize: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ble.UploadBLEFirmwareInit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadBLEFirmwareInit {
    fn default() -> &'a UploadBLEFirmwareInit {
        <UploadBLEFirmwareInit as ::protobuf::Message>::default_instance()
    }
}

impl UploadBLEFirmwareInit {
    pub fn new() -> UploadBLEFirmwareInit {
        ::std::default::Default::default()
    }

    // required bytes init_data = 1;

    pub fn init_data(&self) -> &[u8] {
        match self.init_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_init_data(&mut self) {
        self.init_data = ::std::option::Option::None;
    }

    pub fn has_init_data(&self) -> bool {
        self.init_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_init_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.init_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_init_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.init_data.is_none() {
            self.init_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.init_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_init_data(&mut self) -> ::std::vec::Vec<u8> {
        self.init_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 binsize = 2;

    pub fn binsize(&self) -> u32 {
        self.binsize.unwrap_or(0)
    }

    pub fn clear_binsize(&mut self) {
        self.binsize = ::std::option::Option::None;
    }

    pub fn has_binsize(&self) -> bool {
        self.binsize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_binsize(&mut self, v: u32) {
        self.binsize = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "init_data",
            |m: &UploadBLEFirmwareInit| { &m.init_data },
            |m: &mut UploadBLEFirmwareInit| { &mut m.init_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "binsize",
            |m: &UploadBLEFirmwareInit| { &m.binsize },
            |m: &mut UploadBLEFirmwareInit| { &mut m.binsize },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadBLEFirmwareInit>(
            "UploadBLEFirmwareInit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadBLEFirmwareInit {
    const NAME: &'static str = "UploadBLEFirmwareInit";

    fn is_initialized(&self) -> bool {
        if self.init_data.is_none() {
            return false;
        }
        if self.binsize.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.init_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                16 => {
                    self.binsize = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.init_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.binsize {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.init_data.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.binsize {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadBLEFirmwareInit {
        UploadBLEFirmwareInit::new()
    }

    fn clear(&mut self) {
        self.init_data = ::std::option::Option::None;
        self.binsize = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadBLEFirmwareInit {
        static instance: UploadBLEFirmwareInit = UploadBLEFirmwareInit {
            init_data: ::std::option::Option::None,
            binsize: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadBLEFirmwareInit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadBLEFirmwareInit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadBLEFirmwareInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadBLEFirmwareInit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.ble.UploadBLEFirmwareNextChunk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UploadBLEFirmwareNextChunk {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.ble.UploadBLEFirmwareNextChunk.offset)
    pub offset: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ble.UploadBLEFirmwareNextChunk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadBLEFirmwareNextChunk {
    fn default() -> &'a UploadBLEFirmwareNextChunk {
        <UploadBLEFirmwareNextChunk as ::protobuf::Message>::default_instance()
    }
}

impl UploadBLEFirmwareNextChunk {
    pub fn new() -> UploadBLEFirmwareNextChunk {
        ::std::default::Default::default()
    }

    // required uint32 offset = 1;

    pub fn offset(&self) -> u32 {
        self.offset.unwrap_or(0)
    }

    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "offset",
            |m: &UploadBLEFirmwareNextChunk| { &m.offset },
            |m: &mut UploadBLEFirmwareNextChunk| { &mut m.offset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadBLEFirmwareNextChunk>(
            "UploadBLEFirmwareNextChunk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadBLEFirmwareNextChunk {
    const NAME: &'static str = "UploadBLEFirmwareNextChunk";

    fn is_initialized(&self) -> bool {
        if self.offset.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.offset = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.offset {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadBLEFirmwareNextChunk {
        UploadBLEFirmwareNextChunk::new()
    }

    fn clear(&mut self) {
        self.offset = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadBLEFirmwareNextChunk {
        static instance: UploadBLEFirmwareNextChunk = UploadBLEFirmwareNextChunk {
            offset: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadBLEFirmwareNextChunk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadBLEFirmwareNextChunk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadBLEFirmwareNextChunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadBLEFirmwareNextChunk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.ble.UploadBLEFirmwareChunk)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UploadBLEFirmwareChunk {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.ble.UploadBLEFirmwareChunk.data)
    pub data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ble.UploadBLEFirmwareChunk.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadBLEFirmwareChunk {
    fn default() -> &'a UploadBLEFirmwareChunk {
        <UploadBLEFirmwareChunk as ::protobuf::Message>::default_instance()
    }
}

impl UploadBLEFirmwareChunk {
    pub fn new() -> UploadBLEFirmwareChunk {
        ::std::default::Default::default()
    }

    // required bytes data = 1;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &UploadBLEFirmwareChunk| { &m.data },
            |m: &mut UploadBLEFirmwareChunk| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadBLEFirmwareChunk>(
            "UploadBLEFirmwareChunk",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadBLEFirmwareChunk {
    const NAME: &'static str = "UploadBLEFirmwareChunk";

    fn is_initialized(&self) -> bool {
        if self.data.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadBLEFirmwareChunk {
        UploadBLEFirmwareChunk::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadBLEFirmwareChunk {
        static instance: UploadBLEFirmwareChunk = UploadBLEFirmwareChunk {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadBLEFirmwareChunk {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadBLEFirmwareChunk").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadBLEFirmwareChunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadBLEFirmwareChunk {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.ble.EraseBonds)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EraseBonds {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ble.EraseBonds.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EraseBonds {
    fn default() -> &'a EraseBonds {
        <EraseBonds as ::protobuf::Message>::default_instance()
    }
}

impl EraseBonds {
    pub fn new() -> EraseBonds {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EraseBonds>(
            "EraseBonds",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EraseBonds {
    const NAME: &'static str = "EraseBonds";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EraseBonds {
        EraseBonds::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EraseBonds {
        static instance: EraseBonds = EraseBonds {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EraseBonds {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EraseBonds").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EraseBonds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EraseBonds {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.ble.Disconnect)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Disconnect {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.ble.Disconnect.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Disconnect {
    fn default() -> &'a Disconnect {
        <Disconnect as ::protobuf::Message>::default_instance()
    }
}

impl Disconnect {
    pub fn new() -> Disconnect {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Disconnect>(
            "Disconnect",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Disconnect {
    const NAME: &'static str = "Disconnect";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Disconnect {
        Disconnect::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Disconnect {
        static instance: Disconnect = Disconnect {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Disconnect {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Disconnect").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Disconnect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Disconnect {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12messages-ble.proto\x12\x16hw.trezor.messages.ble\x1a\roptions.prot\
    o\x1a\x0emessages.proto\"N\n\x15UploadBLEFirmwareInit\x12\x1b\n\tinit_da\
    ta\x18\x01\x20\x02(\x0cR\x08initData\x12\x18\n\x07binsize\x18\x02\x20\
    \x02(\rR\x07binsize\"4\n\x1aUploadBLEFirmwareNextChunk\x12\x16\n\x06offs\
    et\x18\x01\x20\x02(\rR\x06offset\",\n\x16UploadBLEFirmwareChunk\x12\x12\
    \n\x04data\x18\x01\x20\x02(\x0cR\x04data\"\x0c\n\nEraseBonds\"\x0c\n\nDi\
    sconnectB;\n#com.satoshilabs.trezor.lib.protobufB\x10TrezorMessageBLE\
    \x80\xa6\x1d\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::options::file_descriptor().clone());
            deps.push(super::messages::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(UploadBLEFirmwareInit::generated_message_descriptor_data());
            messages.push(UploadBLEFirmwareNextChunk::generated_message_descriptor_data());
            messages.push(UploadBLEFirmwareChunk::generated_message_descriptor_data());
            messages.push(EraseBonds::generated_message_descriptor_data());
            messages.push(Disconnect::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
